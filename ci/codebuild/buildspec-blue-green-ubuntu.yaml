version: 0.2

phases:
  install:
    runtime-versions:
      docker: 20

  pre_build:
    commands:
      # Install tools
      - apt-get update
      - apt-get install zip bash gettext jq -y
      # Install docker-compose
      - docker --version
      - curl -L "https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      - chmod +x /usr/local/bin/docker-compose
      - docker-compose --version
      # Launch docker daemon
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay&
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"

  build:
    commands:
      # Docker build
      - docker build -t $RAW_SERVICE_NAME .
      # Push container image to ECR
      - echo "Push $CONTAINER_NAME image to ECR"
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REPOSITORY_URL
      - docker tag $RAW_SERVICE_NAME:latest $REPOSITORY_URL:latest
      - docker push $REPOSITORY_URL:latest
      - IMAGE_TAG="$CODEBUILD_BUILD_NUMBER.$(date +%Y%m%d%H%M)"
      - echo $IMAGE_TAG
      - docker tag $RAW_SERVICE_NAME:latest $REPOSITORY_URL:$IMAGE_TAG
      - docker push $REPOSITORY_URL:$IMAGE_TAG

      # Prepare ecs deployment
      - cat cd/ecs/imagedefinitions.cd.json | envsubst > imagedefinitions.json
      - cat imagedefinitions.json
      - cat cd/ecs/$RAW_SERVICE_NAME/taskdef.cd.json | envsubst > taskdef.json
      - cat taskdef.json

      # Blue-Green deployment for api
      - aws ecs describe-task-definition --task-definition $SERVICE_NAME > taskdef.temp.json
      - jq --version
      - cat taskdef.temp.json
      - cat taskdef.temp.json | jq '.taskDefinition'| jq 'del(.registeredAt, .registeredBy, .requiresCompatibilities, .compatibilities, .requiresAttributes, .placementConstraints, .status, .revision, .taskDefinitionArn)' > taskdef.raw.json 
      - export IMAGE_URL=$REPOSITORY_URL:$IMAGE_TAG
      - echo $IMAGE_URL
      - cat taskdef.raw.json
      - cat taskdef.raw.json | jq '(.containerDefinitions[] | select(.name == $ENV.SERVICE_NAME) | .image) |= $ENV.IMAGE_URL' > taskdef.$SERVICE_NAME.json

    

      - cat taskdef.$SERVICE_NAME.json
      - cat cd/codedeploy/appspec.cd.yaml | envsubst > appspec.$SERVICE_NAME.yaml
      - cat appspec.$SERVICE_NAME.yaml


  post_build:
    commands:
      # Remove images 
      - docker image rm "$RAW_SERVICE_NAME:latest" -f
      - docker image rm "$REPOSITORY_URL:$IMAGE_TAG" -f

artifacts:
  files:
    - ./appspec.$SERVICE_NAME.yaml
    - ./imagedefinitions.json
    - ./taskdef.$SERVICE_NAME.json